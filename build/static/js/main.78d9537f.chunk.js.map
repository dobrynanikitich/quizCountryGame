{"version":3,"sources":["components/quizCard/QuizCard.module.scss","components/header/Header.module.scss","components/quizList/QuizList.module.scss","components/googleAuth/GoogleAuth.module.scss","components/actualQuizGame/answerVariant/AnswerVariants.module.scss","components/modals/AuthGoogle.module.scss","App.module.scss","components/actualQuizGame/ActualQuizGame.module.scss","components/button/Button.module.scss","components/modals/GameOverModal.module.scss","components/timer/Timer.module.scss","assets/mainLogo.png","components/googleAuth/GoogleAuth.js","components/header/Header.js","components/quizList/quizItem/QuizItem.js","components/quizList/QuizList.js","components/button/Button.js","components/modals/GameOverModal.js","components/actualQuizGame/answerVariant/AnswerVariants.js","components/quizCard/QuizCard.js","components/timer/Timer.js","components/actualQuizGame/ActualQuizGame.js","components/modals/AuthGoogle.js","components/MyRoute.js","constants/constants.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","cx","classNames","bind","classes","GoogleAuth","changeState","isLogin","useState","accountImage","setAccountImage","className","LoginGoogle","responseGoogle","response","profileObj","imageUrl","LoginWrapper","AccountImg","alt","src","clientId","buttonText","onLogoutSuccess","onSuccess","onFailure","cookiePolicy","Header","score","HeaderApp","to","HeaderLogo","logo","onClick","HeaderTitle","CurrentScore","QuizItem","detectMessageType","quizType","this","props","Component","withRouter","quizTypes","QuizList","map","item","nextQuestionBtn","click","buttonName","Next","Back","PlayAgain","gameOver","currentScore","returnToMainPageHandler","GameOverWrapper","Button","AnswerVariant","clickAnswerHandler","e","isCorrectAnswer","checkAnswerHandler","isRightAnswerDone","state","isClicked","setState","currentObjectField","answerVariant","currentQuizType","Name","Flag","FlagAnswerImg","CurrencyName","Area","Answer","RightAnswer","WrongAnswer","quizCard","questionBlock","currentEl","answers","sortedCountriesList","AnswersListWrapper","TextBlock","FlagBlock","AnswerListFlags","AnwersListText","NativeName","Timer","count","timeIsLeftHadler","myInterval","setInterval","prevState","clearInterval","TimerBlock","CountryQuiz","isLoading","currentPoints","isGameOver","randomSort","Math","random","createAnswerVariants","push","num","floor","find","length","sort","nextQuestionHandler","target","countriesList","GameOverModal","QuizCard","authGoogle","AuthGoogle","AuthGoogleWrapper","myRouter","quizToRender","ActualQuizGame","path","exact","render","initialState","override","css","App","prop","value","fetch","proxyurl","then","res","json","context","Response","AppWrapper","size","color","loading","QuizBlock","MyRoute","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78d9537f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersListWrapper\":\"QuizCard_AnswersListWrapper__5cGPu\",\"FlagBlock\":\"QuizCard_FlagBlock__2KD_W\",\"TextBlock\":\"QuizCard_TextBlock__2Ra-j\",\"AnwersListText\":\"QuizCard_AnwersListText__1HGFA\",\"AnswerListFlags\":\"QuizCard_AnswerListFlags__8_EHx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderApp\":\"Header_HeaderApp__1Pc9e\",\"HeaderLogo\":\"Header_HeaderLogo__2ChYG\",\"HeaderTitle\":\"Header_HeaderTitle__3aY7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"QuizList\":\"QuizList_QuizList__2P4dW\",\"QuizItem\":\"QuizList_QuizItem__GoM3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginWrapper\":\"GoogleAuth_LoginWrapper__2Mb_3\",\"AccountImg\":\"GoogleAuth_AccountImg__3Dgw6\",\"LoginGoogle\":\"GoogleAuth_LoginGoogle__3gr8k\",\"LogoutGoogle\":\"GoogleAuth_LogoutGoogle__1NGaB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Answer\":\"AnswerVariants_Answer__2ExWW\",\"RightAnswer\":\"AnswerVariants_RightAnswer__np4Di\",\"WrongAnswer\":\"AnswerVariants_WrongAnswer__3wtyF\",\"FlagAnswerImg\":\"AnswerVariants_FlagAnswerImg__3rdV1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthGoogleWrapper\":\"AuthGoogle_AuthGoogleWrapper__2H4eJ\",\"AuthGoogle\":\"AuthGoogle_AuthGoogle__1GHRz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppWrapper\":\"App_AppWrapper__1p4EZ\",\"QuizBlock\":\"App_QuizBlock__lQTuG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountryQuiz\":\"ActualQuizGame_CountryQuiz__3Z2_h\",\"WrongAnswer\":\"ActualQuizGame_WrongAnswer__1gtSW\",\"RightAnswer\":\"ActualQuizGame_RightAnswer__1ZLmV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Next\":\"Button_Next__zoe5J\",\"Back\":\"Button_Back__204Cn\",\"PlayAgain\":\"Button_PlayAgain__3Ky20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameOverWrapper\":\"GameOverModal_GameOverWrapper__10iGx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimerBlock\":\"Timer_TimerBlock__YF3ZL\"};","export default __webpack_public_path__ + \"static/media/mainLogo.55f149b1.png\";","import React, { useState, useEffect } from 'react';\n\nimport GoogleLogin from 'react-google-login';\nimport { GoogleLogout } from 'react-google-login';\n\nimport classes from './GoogleAuth.module.scss';\nimport classNames from 'classnames/bind';\n\nlet cx = classNames.bind(classes);\n\nconst GoogleAuth = ({ changeState, isLogin }) => {\n    const [accountImage, setAccountImage] = useState('');\n\n    const className = cx({\n        LoginGoogle: true,\n    })\n\n    const responseGoogle = (response) => {\n        changeState('isLogin', true);\n        setAccountImage(response.profileObj.imageUrl);\n    }\n\n    const logout = () => {\n        changeState('isLogin', false);\n    }\n\n    return (\n        <div className={classes.LoginWrapper}>\n        {\n            isLogin ?\n                <>\n                    <div className={classes.AccountImg}>\n                        <img alt='account_img' src={accountImage} />\n                    </div>\n                    <GoogleLogout\n                        clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n                        buttonText=\"Logout\"\n                        onLogoutSuccess={logout}\n                        className={className}\n                    />\n                </> :\n                <GoogleLogin\n                    clientId=\"742036064829-dpcmuogppip94tj7gh0hs3u0qgbete2m.apps.googleusercontent.com\"\n                    buttonText=\"Login\"\n                    onSuccess={responseGoogle}\n                    onFailure={responseGoogle}\n                    cookiePolicy={'single_host_origin'}\n                    className={className}\n                />\n        }\n    </div>\n    )\n}\n\nexport default GoogleAuth;","import React, { useState } from 'react';\nimport logo from '../../assets/mainLogo.png';\n\nimport GoogleAuth from '../googleAuth/GoogleAuth';\nimport { Link } from 'react-router-dom';\n\nimport classes from './Header.module.scss';\nimport classNames from 'classnames/bind';\n\nconst Header = ({ score, changeState, isLogin }) => {\n    return (\n        <header className={classes.HeaderApp}>\n            <Link to='/'>\n                <img\n                    className={classes.HeaderLogo}\n                    src={logo} \n                    alt='quiz application logo' \n                    onClick={() => {\n                        changeState('initialState');\n                        changeState('isLogin', isLogin);\n                    }}/>\n            </Link>\n            <div className={classes.HeaderTitle}>\n                <div className={classes.CurrentScore}>\n                    <span>Your score: {score}</span>\n                </div>\n            </div>\n            <GoogleAuth \n                changeState={changeState}\n                isLogin={isLogin}\n            />\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport classes from  '../QuizList.module.scss';\n\nclass QuizItem extends Component {\n    detectMessageType = (quizType) => {\n        switch (quizType) {\n            case 'country':\n                return `Try to do you best in simple country quiz. Your task to score max points, choosing right answers.\n                The card includes country flag and 4 different answer variants. You will have 2 minutes to do your best. Be carefull only one variant is right. Good luck!`;\n            case 'flag':\n                return `Try to do you best in simple flag quiz. Your task to score max points, choosing right answers.\n                The card includes country name and 4 different answer variants with flags. You will have 2 minutes to do your best. Be carefull only one variant is right. Good luck!`;\n            case 'currency':\n                return `Try to do you best in simple country quiz. Your task to score max points, choosing right answers.\n                The card includes country currency and 4 different answer variants. You will have 2 minutes to do your best. Be carefull only one variant is right. Good luck!`;\n            case 'area':\n                return `Try to do you best in simple country quiz. Your task to score max points, choosing right answers.\n                The card  includes country area and 4 different answer variants. You will have 2 minutes to do your best. Be carefull only one variant is right. Good luck!!`;\n            default: break;    \n        }\n    }\n    render() {\n        const { quizType, changeState } = this.props;\n        return (\n            <Link to={`/${quizType}`} >\n                <li className={classes.QuizItem} onClick={() => changeState('currentQuizType', quizType)}>\n                    <h2>{quizType}</h2>\n                    <div>{this.detectMessageType(quizType)}</div>\n                </li>\n            </Link>\n        )\n    }\n}\n\nexport default withRouter(QuizItem);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport QuizItem from './quizItem/QuizItem';\n\nimport classes from  './QuizList.module.scss';\n\nconst QuizList = ({ quizTypes, changeState }) => (\n    <ul className={classes.QuizList}>\n        {quizTypes.map(item => <QuizItem key={item} quizType={item} changeState={changeState}/>)}\n    </ul>\n);\n\nexport default withRouter(QuizList);\n","import React from 'react';\n\nimport classes from './Button.module.scss';\nimport classNames from 'classnames/bind';\n\nlet cx = classNames.bind(classes);\n\nconst nextQuestionBtn = ({ click, buttonName }) => {\n    let className = cx({\n        Next: buttonName === 'next',\n        Back: buttonName === 'refresh',\n        PlayAgain: buttonName === 'playAgain'\n    });\n    return (\n        <button className={className} onClick={click}>\n            {buttonName}\n        </button>\n    );\n}\n\nexport default nextQuestionBtn;","import React from 'react';\n\nimport Button from '../button/Button';\nimport classes from './GameOverModal.module.scss';\n\nconst gameOver = ({ currentScore, returnToMainPageHandler }) => (\n    <section className={classes.GameOverWrapper}>\n        <div>Time is over</div>\n        <div>You scored {currentScore} points</div>\n        <Button click={() => returnToMainPageHandler()} buttonName={'playAgain'} />\n    </section>\n);\n\nexport default gameOver;","import React, { Component } from 'react';\n\nimport classes from './AnswerVariants.module.scss';\nimport classNames from 'classnames/bind';\n\nlet cx = classNames.bind(classes);\n\nclass AnswerVariant extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCorrectAnswer: props.isCorrectAnswer,\n            isClicked: false,\n        }\n    }\n\n    clickAnswerHandler = (e, isCorrectAnswer) => {\n        const { checkAnswerHandler, isRightAnswerDone } = this.props;\n        if (isRightAnswerDone) {\n            return\n        }\n        const { isClicked } = this.state;\n        if (!isClicked) {\n            this.setState({ isClicked: true });\n            if (!isRightAnswerDone) {\n                checkAnswerHandler(e, isCorrectAnswer);\n            }\n        }\n    }\n\n    render() {\n        const { answerVariant, currentQuizType } = this.props;\n        const { isCorrectAnswer, isClicked } = this.state;\n        let currentObjectField;\n        switch (currentQuizType) {\n            case 'country':\n                currentObjectField = answerVariant.Name;\n                break;\n            case 'flag':\n                currentObjectField = <img alt='country flag' src={answerVariant.Flag} className={classes.FlagAnswerImg}/>;\n                break;\n            case 'currency':\n                currentObjectField = answerVariant.CurrencyName;\n                break;\n            case 'area':\n                currentObjectField = answerVariant.Area;\n        }\n        let className = cx({\n            Answer: true,\n            RightAnswer: isClicked && isCorrectAnswer,\n            WrongAnswer: isClicked && !isCorrectAnswer,\n        });\n        return (\n            <li\n                className={className}\n                onClick={(e) => this.clickAnswerHandler(e, isCorrectAnswer)}\n            >\n                {currentObjectField}\n            </li>\n        )\n    }\n}\n\nexport default AnswerVariant","import React from 'react';\n\nimport AnswerVariant from '../actualQuizGame/answerVariant/AnswerVariants';\n\nimport classes from './QuizCard.module.scss';\n\nconst quizCard = ({ currentQuizType, currentEl, answers, sortedCountriesList, isRightAnswerDone, checkAnswerHandler }) => {\n    let questionBlock;\n    switch(currentQuizType) {\n        case 'country':\n            questionBlock = <img src={sortedCountriesList[currentEl].Flag} />\n            break;\n        case 'flag':\n            questionBlock = <div>{sortedCountriesList[currentEl].Name}</div>\n            break;\n        case 'currency':\n            questionBlock = <img src={sortedCountriesList[currentEl].Flag} />\n            break;\n        case 'area':\n            questionBlock = <img src={sortedCountriesList[currentEl].Flag} />\n    }\n\n    return (\n        <div className={classes.AnswersListWrapper}>\n            <div className={currentQuizType === 'flag' ? classes.TextBlock : classes.FlagBlock}>\n                { questionBlock }\n            </div>\n            <ul className={currentQuizType === 'flag' ? classes.AnswerListFlags : classes.AnwersListText}>\n                {\n                    answers.map(item => {\n                        return (\n                            <AnswerVariant \n                                key={item.NativeName} \n                                answerVariant={item} \n                                checkAnswerHandler={checkAnswerHandler}\n                                isCorrectAnswer={item.Name === sortedCountriesList[currentEl].Name}\n                                isRightAnswerDone={isRightAnswerDone}\n                                currentQuizType={currentQuizType}\n                            />\n                        );\n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default quizCard;","import React, { Component } from 'react';\n\nimport classes from './Timer.module.scss';\n\nclass Timer extends Component {\n    state = {\n        count: 120,\n    }\n    componentDidMount() {\n        let { count } = this.state;\n        let { timeIsLeftHadler } = this.props;\n        this.myInterval = setInterval(() => {\n            this.setState((prevState) => ({\n                count: prevState.count - 1,\n            }), () => {\n                if (this.state.count <= 0) {\n                    timeIsLeftHadler();\n                }\n            })\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval);\n    }\n\n    render() {\n        let { count } = this.state;\n        return (\n            <div className={classes.TimerBlock}> \n                <h1>Time left: {count}</h1>\n            </div>\n        );\n    }\n}\n\nexport default Timer;","import React, { Component } from 'react';\nimport classes from './ActualQuizGame.module.scss';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport Button from '../button/Button';\nimport GameOverModal from '../modals/GameOverModal';\nimport QuizCard from '../quizCard/QuizCard';\nimport Timer from '../timer/Timer';\n\nclass CountryQuiz extends Component {\n    state = {\n        currentEl: 0,\n        isLoading: this.sortedCountriesList ? false : true,\n        answers: [],\n        currentPoints: 6,\n        isRightAnswerDone: false,\n        isGameOver: false,\n    };\n\n    componentDidMount() {\n        const { countriesList } = this.props; \n        const sortedCountriesList = countriesList.sort(this.randomSort);\n        this.setState({ \n            sortedCountriesList: sortedCountriesList,\n            isLoading: false,\n        }, () => this.createAnswerVariants())\n    }\n\n    randomSort = () =>  {\n        return 0.5 - Math.random();\n    }\n\n    createAnswerVariants = () => {\n        let { answers, sortedCountriesList, currentEl } = this.state;\n        const { currentQuizType } = this.props;\n        let currentObjectField;\n        switch (currentQuizType) {\n            case 'country':\n                currentObjectField = 'Name';\n                break;\n            case 'flag':\n                currentObjectField = 'Flag';\n                break;\n            case 'currency':\n                currentObjectField = 'CurrencyName';\n                break;\n            case 'area':\n                currentObjectField = 'Area';\n                break;\n        }\n        answers = [];\n        answers.push(sortedCountriesList[currentEl]);\n        do {\n            let num = Math.floor((Math.random() * 250));\n            if (num === currentEl || answers.find(item => item[currentObjectField] === sortedCountriesList[num][currentObjectField])) {\n                continue\n            } else {\n                answers.push(sortedCountriesList[num]);\n            }\n        } while (answers.length !== 4)\n        this.setState({ answers: answers.sort(this.randomSort) })\n    }\n\n    nextQuestionHandler = () => {\n        const { isRightAnswerDone } = this.state;\n        if (!isRightAnswerDone) {\n            return;\n        } else {\n            this.setState((prevState) => {\n                return {\n                    currentEl: prevState.currentEl + 1,\n                    currentPoints: 6,\n                    isRightAnswerDone: false,\n                }\n            }, () => this.createAnswerVariants());\n        }\n    }\n\n    returnToMainPageHandler = () => {\n        const { changeState, currentQuizType, isLogin } = this.props;\n        changeState('initialState');\n        changeState('currentQuizType', currentQuizType);\n        changeState('isLogin', isLogin); \n    }\n\n    checkAnswerHandler = (e, isCorrectAnswer) => {\n        const { sortedCountriesList, currentEl, currentPoints } = this.state;\n        const { changeState, currentScore, currentQuizType } = this.props;\n        const { target } = e;\n        let currentObjectField;\n        switch (currentQuizType) {\n            case 'country':\n                currentObjectField = 'Name';\n                break;\n            case 'flag':\n                currentObjectField = 'Flag';\n                break;\n            case 'currency':\n                currentObjectField = 'CurrencyName';\n                break;\n            case 'area':\n                currentObjectField = 'Area';\n                break;\n        }\n        if (isCorrectAnswer) {\n            changeState('currentScore', currentPoints + currentScore);\n            this.setState({ isRightAnswerDone: true });\n        } else {\n            this.setState((prevState) => {\n                return { currentPoints: prevState.currentPoints - 2  }\n            });\n        }\n    }\n\n    timeIsLeftHadler = () => {\n        this.setState({ isGameOver: true })\n    }\n\n    render() {\n        const { isLoading, currentEl, answers, isRightAnswerDone, sortedCountriesList, isGameOver } = this.state;\n        const { currentQuizType, currentScore } = this.props;\n        return (\n            <section className={classes.CountryQuiz}>\n                {isGameOver && \n                    <div>\n                        <GameOverModal \n                            currentScore={currentScore} \n                            returnToMainPageHandler={this.returnToMainPageHandler} />\n                    </div>}\n                {!isGameOver && (isLoading ? <ClipLoader /> : (\n                    <>\n                        <Timer \n                            timeIsLeftHadler={this.timeIsLeftHadler}\n                        />\n                        <QuizCard \n                            currentQuizType={currentQuizType}\n                            currentEl={currentEl}\n                            answers={answers}\n                            sortedCountriesList={sortedCountriesList}\n                            isRightAnswerDone={isRightAnswerDone}\n                            checkAnswerHandler={this.checkAnswerHandler}\n                        />\n                        <Button click={this.nextQuestionHandler} buttonName={'next'} />\n                        <Button click={this.returnToMainPageHandler} buttonName={'refresh'} />\n                    </>\n                ))\n                }\n            </section>\n        )\n    }\n}\n\nexport default CountryQuiz;","import React from 'react';\nimport GoogleAuth from '../googleAuth/GoogleAuth';\n\nimport classes from './AuthGoogle.module.scss';\nimport classNames from 'classnames/bind';\n\nlet cx = classNames.bind(classes);\n\nconst authGoogle = ({ changeState, isLogin }) => {\n    const classNames = cx({\n        AuthGoogle: true,\n    })\n\n    return (\n        <div className={classes.AuthGoogleWrapper}>\n            <h2>Please log in to continue playing</h2>\n            <GoogleAuth \n                changeState={changeState}\n                isLogin={isLogin}\n            />\n        </div>\n    )\n}\n\nexport default authGoogle;","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport QuizList from './quizList/QuizList';\nimport ActualQuizGame from './actualQuizGame/ActualQuizGame';\nimport AuthGoogle from './modals/AuthGoogle';\n\nconst myRouter = ({ countriesList, changeState, currentScore, currentQuizType, isLogin, quizTypes }) => {\n    const quizToRender = isLogin ? (\n        <ActualQuizGame \n            countriesList={countriesList}\n            changeState={changeState}\n            currentScore={currentScore}\n            currentQuizType={currentQuizType}\n            isLogin={isLogin}\n        />\n    ) : (\n        <AuthGoogle \n            changeState={changeState}\n            isLogin={isLogin}\n        />\n    );\n\n    return (\n        <>\n            <Route path={`/`} exact render={() => <QuizList quizTypes={quizTypes} changeState={changeState}/>} />\n            <Route path={`/country`} render={() => quizToRender} />\n            <Route path={`/flag`} render={() => quizToRender} />\n            <Route path={`/currency`} render={() => quizToRender} />\n            <Route path={`/area`} render={() => quizToRender} />\n        </>\n    )\n}\n\nexport default myRouter;\n","import { css } from \"@emotion/core\";\n\nconst initialState = {\n    currentScore: 0,\n    currentQuizType: null,\n    quizTypes: ['country', 'flag', 'currency', 'area'],\n    isLoading: true,\n    isLogin: false,\n}\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n`;\n\nexport { override, initialState };","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport Header from  './components/header/Header';\nimport MyRouter from './components/MyRoute';\n\nimport { override, initialState } from './constants/constants';\nimport classes from './App.module.scss';\n\nclass App extends Component {\n  state = initialState;\n\n  componentDidMount() {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = 'http://countryapi.gear.host/v1/Country/getCountries';\n    fetch(proxyurl + url)\n      .then(res => res.json())\n      .then(context => this.setState({\n        countriesList: context.Response,\n        isLoading: false,\n      }));\n  }\n\n  changeState = (prop, value) => {\n    if (prop === 'initialState') {\n      this.setState(initialState, () => {\n        if (this.state.countriesList) {\n          this.setState({ isLoading: false })\n        }\n      })\n    } else {\n      this.setState((prevState) => ({\n        [prop]: value,\n      }))\n    }\n  }\n\n  render() {\n    const { currentScore, currentQuizType, quizTypes, countriesList, isLoading, isLogin } = this.state;\n    return (\n      <Router>\n        <div className={classes.AppWrapper}>\n          <Header \n            score={currentScore}\n            currentQuizType={currentQuizType}\n            changeState={this.changeState}\n            isLogin={isLogin}\n          />\n          {\n            isLoading ? \n              (<ClipLoader\n                css={override}\n                size={450}\n                color={\"#123abc\"}\n                loading={isLoading}\n              />) :       \n              (<section className={classes.QuizBlock}>\n                <MyRouter \n                  countriesList={countriesList}\n                  changeState={this.changeState}\n                  currentScore={currentScore}\n                  currentQuizType={currentQuizType}\n                  isLogin={isLogin}\n                  quizTypes={quizTypes}\n                />\n              </section>)\n          }\n        </div>\n      </Router>\n    )\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}